import numpy as np
def solve_jacobi(A: np.ndarray, b: np.ndarray, n: int) -> list:
    A = np.array(A, dtype=float)
    b = np.array(b, dtype=float)
    x = np.zeros_like(b, dtype=float)
    
    for _ in range(n):
        x_new = np.zeros_like(x, dtype=float)
        for i in range(len(b)):
            sum_ax = np.dot(A[i, :], x) - A[i, i] * x[i]
            x_new[i] = (b[i] - sum_ax) / A[i, i]
        x = np.round(x_new, 4)
    
    return x.tolist()
